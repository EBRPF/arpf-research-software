plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.10'
    id 'org.beryx.runtime' version '1.12.5'
}

application {
    mainClassName("org.rrcat.arpf.ui.Main")
}

repositories {
    mavenCentral()
    maven { url = "https://nexus.gluonhq.com/nexus/content/repositories/releases/" }
}

compileJava.targetCompatibility = JavaVersion.VERSION_16
compileJava.sourceCompatibility = JavaVersion.VERSION_16

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.1') {
        exclude group: 'org.openjfx'
    }
    implementation project(":common")
    implementation 'com.jfoenix:jfoenix:9.0.10'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation group: 'com.google.inject', name: 'guice', version: '5.0.1'
    implementation "com.gluonhq:charm-glisten:6.0.6"
    implementation 'com.google.code.gson:gson:2.8.7'
    implementation  'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation 'com.squareup.retrofit2:converter-jackson:2.9.0'
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

javafx {
    version = '16'
    modules = ['javafx.controls', 'javafx.fxml' ]
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    targetPlatform("lin") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk-16%2B36_openj9-0.25.0/OpenJDK16-jdk_x64_linux_openj9_16_36_openj9-0.25.0.tar.gz")
    }
    targetPlatform("mac") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk-16%2B36_openj9-0.25.0/OpenJDK16-jdk_x64_mac_openj9_16_36_openj9-0.25.0.tar.gz") {
            downloadDir = "$buildDir/myMac"
            archiveName = "my-mac-jdk"
            archiveExtension = "tar.gz"
            pathToHome = "jdk-15.0.2+7/Contents/Home"
            overwrite = true
        }
    }
    targetPlatform("win") {
        jdkHome = jdkDownload("https://github.com/AdoptOpenJDK/openjdk16-binaries/releases/download/jdk-16%2B36_openj9-0.25.0/OpenJDK16-jdk_x64_windows_openj9_16_36_openj9-0.25.0.zip")
    }


    launcher {
        noConsole = true
    }
    jpackage {
        targetPlatformName = "mac"

        def currentOs = org.gradle.internal.os.OperatingSystem.current()
        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/hellofx.$imgType"]
        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'ARPF Indore']

        if(currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        }
        else if (currentOs.linux) {
            installerOptions += ['--linux-package-name', 'hellofx','--linux-shortcut']
        }
        else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'hellofx']
        }
    }
}


def args = [
        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
        "--illegal-access=warn",
        "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        //the next line changes everything.
        "--add-opens=java.base/java.lang.reflect=com.jfoenix",

        "--add-exports=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-exports=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=java.base/java.lang.reflect=com.jfoenix",
        "--add-exports=javafx.controls/com.Sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",

        "--add-exports=javafx.base/com.sun.javafx.event=ALL-UNNAMED",

        "--add-exports=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" +
                "=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior" +
                "=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.binding=com.jfoenix",
        "--illegal-access=warn",
        "--add-opens=javafx.controls/javafx.scene.control.skin=com.jfoenix",
        "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=ALL-UNNAMED",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=ALL-UNNAMED",

        "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
        "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
        "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix",
        "--add-exports=javafx.base/com.sun.javafx.event=com.jfoenix"
]
run {
    jvmArgs = args
}